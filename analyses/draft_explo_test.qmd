---
title: "Exploration of odonates dataset"
author: "Dragon CESAB"
format: dashboard
server: shiny
---


# General Overview
```{r load}
library(plotly)
library(terra)
library(tmap)

tab <- readRDS(here::here("data", "derived-data", "occ_all_df.rds"))
rastat <- readRDS(here::here("data", "derived-data", "stat_10000.rds"))
ra84 <- project(rastat, crs("EPSG:3857"))

sp <- readRDS(here::here("data", "derived-data", "species_10000.rds"))
po <- readRDS(here::here("data", "derived-data", "percobs_10000.rds"))
py <- readRDS(here::here("data", "derived-data", "percyear_10000.rds"))

sp <- project(sp, crs("EPSG:3857"))
names(sp)[1] <- "All"
po <- project(po, crs("EPSG:3857"))
names(po)[1] <- "All"
py <- project(py, crs("EPSG:3857"))
names(py)[1] <- "All"

# set the function to calculate the number of unique elements
nodup <- function(x) {return(sum(!duplicated(x)))}

# interactive mode for tmap
suppressMessages(tmap_mode("view"))
```



## Row {height=40%}

### Column {.tabset}

```{r obsyear}
#| title: obs
# number of observation per database
nobs_dbyear <- aggregate(tab$observationID, list(tab$dbID, tab$Year), nodup)
plot_ly(nobs_dbyear, x = ~Group.2, y = ~x, color = ~Group.1) %>% 
    layout(xaxis = list(title = 'Year'),
           yaxis = list(title = 'Number of observations'), 
           barmode = 'stack')
```

```{r gridyear}
#| title: cell
# number of cells per year per country
ngrid_countyear <- aggregate(tab$grid10kmID, list(tab$Country, tab$Year), nodup)
plot_ly(ngrid_countyear, x = ~Group.2, y = ~x, color = ~Group.1) %>% 
    layout(xaxis = list(title = 'Year'),
           yaxis = list(title = 'Number of grid cells'), 
           barmode = 'stack')
```

```{r taxayear}
#| title: taxa
nspe_famyear <- aggregate(tab$species, list(tab$family, tab$Year), nodup)
plot_ly(nspe_famyear, x = ~Group.2, y = ~x, color = ~Group.1) %>% 
        layout(xaxis = list(title = 'Year'),
           yaxis = list(title = 'Number of grid cells'), 
           barmode = 'stack')
```

### Column {.tabset}


```{r}
#| title: taxa per db
# number of species per database per year
nspe_db_year <- tapply(tab$species, list(tab$dbID,tab$Year), nodup)
plot_ly(x=colnames(nspe_db_year), y=rownames(nspe_db_year), z = nspe_db_year, type = "heatmap") %>%
    layout(margin = list(l=120))
```


```{r}
#| title: cell per species
# number of observations per database per year
# nobs_db_year <- table(tab$dbID, tab$Year)
# nobs_db_year[nobs_db_year==0] <- NA
ngrid_sp_year <- tapply(tab$grid10kmID, list(tab$species,tab$Year), nodup)
plot_ly(x=colnames(ngrid_sp_year), y=rownames(ngrid_sp_year), z = ngrid_sp_year, type = "heatmap") %>%
    layout(margin = list(l=120))
```




## Row {height=50% .tabset}


```{r spemap}
#| title: spe
tm_shape(rastat) +
       tm_raster("nspe", interpolate=FALSE, breaks = (0:8)*10) +
       tm_view(basemap.server = "OpenStreetMap")
```


```{r obsmap}
#| title: obs
rastat$logobs <- log(rastat$nobs)
tm_shape(rastat) +
       tm_raster("nobs", interpolate=FALSE, 
       breaks = c(0,1,5,10,50,100, 500,1000, 5000,15000)) +
       tm_view(basemap.server = "OpenStreetMap")

```


```{r yrmap}
#| title: year
tm_shape(rastat) +
       tm_raster("nyr", interpolate=FALSE) +
       tm_view(basemap.server = "OpenStreetMap")
```


```{r yr5map}
#| title: year5
tm_shape(rastat) +
       tm_raster("nyr5", interpolate=FALSE) +
       tm_view(basemap.server = "OpenStreetMap")
```


# Zoom on species 

## Row {height=15%}

```{r}
selectInput("spe", "Species:",
            choices = names(sp),
            selected = "Ischnura elegans")

```

## Row {height=50% .tabset}

```{r}
#| title: N observations
tmapOutput('mapsp')
```

```{r}
#| title: Perc observations
tmapOutput('mappo')
```

```{r}
#| title: Perc Year
tmapOutput('mappy')
```

## Row {height=35% .tabset}
```{r}
#| title: obs
plotlyOutput('tsobs')
```

```{r}
#| title: grid
plotlyOutput('tsgrid')
```


```{r}
#| context: server
output$mapsp <- renderTmap({
    tm_shape(sp) +
      tm_raster("All", interpolate=FALSE, zindex = 401) +
        tm_view(basemap.server = "OpenStreetMap")
})

output$mappo <- renderTmap({
   tm_shape(po) +
      tm_raster("All", interpolate=FALSE, zindex = 501) +
      tm_view(basemap.server = "OpenStreetMap")
})

output$mappy <- renderTmap({
  tm_shape(py) +
    tm_raster("All", interpolate=FALSE, zindex = 601) +
    tm_view(basemap.server = "OpenStreetMap")
})


output$tsobs <- renderPlotly({
    s <- subInput()
    ns <- aggregate(s$observationID, list(s$dbID, s$Year), nodup)
    plot_ly(ns, x = ~Group.2, y = ~x, color = ~Group.1) |> 
        layout(xaxis = list(title = 'Year'),
               yaxis = list(title = 'Number of observations'), 
               barmode = 'stack')
})


output$tsgrid <- renderPlotly({
    s <- subInput()
    ns <- aggregate(s$grid10kmID, list(s$Country, s$Year), nodup)
    plot_ly(ns, x = ~Group.2, y = ~x, color = ~Group.1) |> 
        layout(xaxis = list(title = 'Year'),
               yaxis = list(title = 'Number of grid cells'), 
               barmode = 'stack')
})


subInput <- reactive({
    if(input$spe!="All"){
        stab <- tab[tab$species%in%input$spe,]
    } else {
        stab <- tab
    }
    return(stab)
})

spleg <- reactive({
    if(input$spe=="All"){
      spbk <- (0:8)*10
      splab <- "Richness"
    } else {
      spbk <- c(0,0.5,5,10,50,100,500,10000)
      splab <- "N observations"
    }
    return(list("bk"=spbk, "lab"=splab))
})

poleg <- reactive({
    if(input$spe=="All"){
      pobk <- c(0, 0.9, 5, 10, 50, 100, 500, 1000, 15000)
      polab <- "N Observations"
    } else {
      pobk <- c(0,0.5,5,10,25,50,100)
      polab <- "% observations"
    }
    return(list("bk"=pobk, "lab"=polab))
})

pyleg <- reactive({
    if(input$spe=="All"){
      pybk <- c(0, 0.9, 5, 10, 15, 20, 25, 35)
      pylab <- "N Year"
    } else {
      pybk <- c(0,0.5,5,10,25,50,100)
      pylab <- "% year observed"
    }
    return(list("bk"=pybk, "lab"=pylab))
})

observe({
    tmapProxy("mapsp", session, {
      tm_remove_layer(401) +
      tm_shape(sp) +
      tm_raster(input$spe, interpolate=FALSE, zindex = 401,
                breaks=spleg()$bk, title=spleg()$lab)
    })  
})

observe({
    tmapProxy("mappo", session, {
      tm_remove_layer(501) +
      tm_shape(po) +
      tm_raster(input$spe, interpolate=FALSE, zindex = 501,
                breaks=poleg()$bk, title=poleg()$lab)
    })  
})

observe({
    tmapProxy("mappy", session, {
      tm_remove_layer(601) +
      tm_shape(py) +
      tm_raster(input$spe, interpolate=FALSE, zindex = 601,
                breaks=pyleg()$bk, title=pyleg()$lab)
    })  
})
```
